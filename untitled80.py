# -*- coding: utf-8 -*-
"""Untitled80.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PbM0G0Q_N_rYSjyQ8Sx3QWRkr3hBt6u0
"""

# Project1 = Analyzing Indian Premier League (IPL) Data
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Sample IPL data (you'll need a more comprehensive dataset for real analysis)
data = {
    'season': [2023, 2023, 2023, 2022, 2022, 2022, 2021, 2021, 2021],
    'team1': ['MI', 'CSK', 'RCB', 'MI', 'KKR', 'CSK', 'DC', 'RCB', 'MI'],
    'team2': ['CSK', 'RCB', 'MI', 'KKR', 'CSK', 'MI', 'MI', 'CSK', 'KKR'],
    'winner': ['MI', 'CSK', 'MI', 'MI', 'KKR', 'CSK', 'DC', 'RCB', 'MI'],
    'city': ['Mumbai', 'Chennai', 'Bangalore', 'Kolkata', 'Chennai', 'Mumbai', 'Delhi', 'Bangalore', 'Kolkata'],
    'player_of_match': ['Rohit Sharma', 'MS Dhoni', 'Virat Kohli', 'Jasprit Bumrah', 'Andre Russell', 'Ravindra Jadeja', 'Rishabh Pant', 'AB de Villiers', 'Kieron Pollard'],
    'runs_scored': [160, 180, 175, 150, 200, 190, 170, 185, 165],
}

# Convert data dictionary to DataFrame
ipl_df = pd.DataFrame(data)

# 1. Basic Data Exploration
print(ipl_df.head())  # View the first few rows
print(ipl_df.info())  # Get information about columns and data types

# 2. Team Performance
team_wins = ipl_df['winner'].value_counts()
print("\nTeam Wins: \n", team_wins)

# 3. Player of the Match Analysis
player_of_match_counts = ipl_df['player_of_match'].value_counts()
print("\nPlayer of the Match Counts:\n", player_of_match_counts)

# 4. Runs Scored Analysis
average_runs_per_match = ipl_df['runs_scored'].mean()
print("\nAverage Runs Scored per Match: ", average_runs_per_match)

# 1. Bar Chart of Team Wins
plt.figure(figsize=(10, 6))
sns.countplot(x='winner', data=ipl_df)
plt.title('Number of wins by Team')
plt.xlabel('Team')
plt.ylabel('Number of Wins')
plt.show()

# 2. Histogram of Runs Scored
plt.figure(figsize=(8, 5))
plt.hist(ipl_df['runs_scored'], bins=8)
plt.title('Distribution of Runs Scored per Match')
plt.xlabel('Runs Scored')
plt.ylabel('Frequency')
plt.show()

# project 2
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Sample Indian Demographics Data (Replace with real data from Census of India)
data = {
    'state': ['Maharashtra', 'Uttar Pradesh', 'Bihar', 'West Bengal', 'Tamil Nadu', 'Madhya Pradesh', 'Rajasthan', 'Karnataka', 'Gujarat', 'Andhra Pradesh'],
    'population': [123144223, 237882725, 124799926, 99609303, 77841267, 85034723, 81032689, 67562686, 64357546, 53903393],
    'literacy_rate': [82.9, 73.0, 63.8, 77.1, 80.3, 70.6, 67.1, 75.6, 79.3, 67.4],
    'rural_population_percent': [54.8, 77.7, 88.7, 68.1, 51.7, 72.4, 75.1, 61.3, 57.4, 66.5]
}

# Convert data dictionary to DataFrame
demographics_df = pd.DataFrame(data)

# 1. Basic Data Exploration
print(demographics_df.head())  # View the first few rows
print(demographics_df.info())  # Get information about columns and data types
# 2. Population Analysis
total_population = demographics_df['population'].sum()
print("\nTotal Population of the Listed States:", total_population)
# 3. Literacy Rate Analysis
average_literacy_rate = demographics_df['literacy_rate'].mean()
print("\nAverage Literacy Rate:", average_literacy_rate)
# 4. Correlation between Literacy Rate and Rural Population
correlation = demographics_df['literacy_rate'].corr(demographics_df['rural_population_percent'])
print("\nCorrelation between Literacy Rate and Rural Population Percentage:", correlation)
# 1. Bar Chart of Population by State
plt.figure(figsize=(12, 6))
sns.barplot(x='state', y='population', data=demographics_df)
plt.title('Population by State')
plt.xlabel('State')
plt.ylabel('Population')
plt.xticks(rotation=45)
plt.show()
# 2. Scatter Plot of Literacy Rate vs. Rural Population
plt.figure(figsize=(8, 6))
sns.scatterplot(x='literacy_rate', y='rural_population_percent', data=demographics_df)
plt.title('Literacy Rate vs. Rural Population Percentage')
plt.xlabel('Literacy Rate (%)')
plt.ylabel('Rural Population (%)')
plt.show()

# Project 3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Sample Air Quality Data for Indian Cities (Replace with real data from CPCB)
data = {
    'city': ['Delhi', 'Mumbai', 'Kolkata', 'Chennai', 'Bangalore', 'Hyderabad', 'Pune', 'Ahmedabad', 'Jaipur', 'Lucknow'],
    'date': pd.to_datetime(['2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15']),
    'pm25': [250, 120, 180, 90, 73, 150, 110, 160, 200, 140],
    'no2': [80, 50, 60, 40, 30, 70, 45, 65, 90, 55],
    'so2': [30, 20, 25, 15, 10, 25, 18, 28, 35, 22]
}

# Convert data dictionary to DataFrame
air_quality_df = pd.DataFrame(data)

# 1. Basic Data Exploration
print(air_quality_df.head())  # View the first few rows
print(air_quality_df.info())  # Get information about columns and data types
# 2. PM2.5 Analysis
average_pm25 = air_quality_df['pm25'].mean()
print("\nAverage PM2.5 across cities:", average_pm25)
# 3. City with Highest NO2 Levels
city_highest_no2 = air_quality_df.loc[air_quality_df['no2'].idxmax(), 'city']
print("\nCity with highest NO2 levels: ", city_highest_no2)
# 4. Correlation between Pollutants
correlation_pm25_no2 = air_quality_df['pm25'].corr(air_quality_df['no2'])
print("\nCorrelation between PM2.5 and NO2:", correlation_pm25_no2)

# 1. Bar Chart of PM2.5 Levels by City
plt.figure(figsize=(12, 6))
sns.barplot(x='city', y='pm25', data=air_quality_df)
plt.title('PM2.5 Levels by City')
plt.xlabel('City')
plt.ylabel('PM2.5')
plt.xticks(rotation=45)
plt.show()

# 2. Scatter Plot of PM2.5 vs. NO2
plt.figure(figsize=(8, 6))
sns.scatterplot(x='pm25', y='no2', data=air_quality_df, hue='city')
plt.title('PM2.5 vs. NO2 Levels')
plt.xlabel('PM2.5')
plt.ylabel('NO2')
plt.show()

#Project 4
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Sample Bollywood Movie Data (Replace with real data from IMDb or other sources)
data = {
    'movie_title': ['Movie A', 'Movie B', 'Movie C', 'Movie D', 'Movie E', 'Movie F', 'Movie G', 'Movie H', 'Movie I', 'Movie J'],
    'genre': ['Action', 'Romance', 'Comedy', 'Drama', 'Action', 'Comedy', 'Romance', 'Thriller', 'Drama', 'Action'],
    'release_year': [2023, 2022, 2023, 2021, 2022, 2023, 2020, 2022, 2021, 2023],
    'box_office_crores': [150, 80, 120, 60, 200, 100, 90, 70, 50, 180],
    'lead_actor': ['Actor X', 'Actor Y', 'Actor Z', 'Actor X', 'Actor Y', 'Actor Z', 'Actor X', 'Actor Y', 'Actor Z', 'Actor X']
}

# Convert data dictionary to DataFrame
bollywood_df = pd.DataFrame(data)

# 1. Basic Data Exploration
print(bollywood_df.head())  # View the first few rows
print(bollywood_df.info())  # Get information about columns and data types
# 2. Genre Analysis
genre_counts = bollywood_df['genre'].value_counts()
print("\nMovie Count by Genre:\n", genre_counts)

# 3. Box Office Collection by Genre
box_office_by_genre = bollywood_df.groupby('genre')['box_office_crores'].sum()
print("\nTotal Box Office Collection by Genre:\n", box_office_by_genre)

# 4. Lead Actor Analysis
lead_actor_box_office = bollywood_df.groupby('lead_actor')['box_office_crores'].sum()
print("\nTotal Box Office Collection by Lead Actor:\n", lead_actor_box_office)

# 1. Bar Chart of Movie Count by Genre
plt.figure(figsize=(10, 6))
sns.countplot(x='genre', data=bollywood_df)
plt.title('Number of Movies by Genre')
plt.xlabel('Genre')
plt.ylabel('Number of Movies')
plt.show()


# 2. Pie Chart of Box Office Collection by Genre
plt.figure(figsize=(8, 8))
plt.pie(box_office_by_genre, labels=box_office_by_genre.index, autopct='%1.1f%%', startangle=140)
plt.title('Box Office Collection by Genre')
plt.show()